{"version":3,"names":[],"mappings":"","sources":["vanage.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Vanage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar uuid = require('./src/utils/uuid');\nvar Service = require('./src/Service');\nvar Cache = require('./src/Cache');\nvar Error = require('./src/Error');\n\nmodule.exports = function (undefined) {\n    return {\n        Cache: Cache,\n        Service: Service,\n        create: function create(settings) {\n            settings = settings || {\n                debug: false\n            };\n\n            return new Service(settings);\n        },\n        generateId: uuid\n    };\n}();\n\n},{\"./src/Cache\":3,\"./src/Error\":4,\"./src/Service\":6,\"./src/utils/uuid\":15}],2:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\n(function () {\n  try {\n    cachedSetTimeout = setTimeout;\n  } catch (e) {\n    cachedSetTimeout = function () {\n      throw new Error('setTimeout is not defined');\n    }\n  }\n  try {\n    cachedClearTimeout = clearTimeout;\n  } catch (e) {\n    cachedClearTimeout = function () {\n      throw new Error('clearTimeout is not defined');\n    }\n  }\n} ())\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = cachedSetTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    cachedClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        cachedSetTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Cache = function () {\n    function Cache() {\n        _classCallCheck(this, Cache);\n\n        this.name = 'Vanage.Cache';\n        this.internals = {};\n        this.dirty = false;\n    }\n\n    _createClass(Cache, [{\n        key: 'set',\n        value: function set(key, value) {\n            this.internals[key] = value;\n            this.dirty = true;\n        }\n    }, {\n        key: 'get',\n        value: function get(key) {\n            return this.internals[key];\n        }\n    }, {\n        key: 'flush',\n        value: function flush() {\n            this.internals = {};\n        }\n    }, {\n        key: 'dump',\n        value: function dump() {\n            return this.internals;\n        }\n    }, {\n        key: 'isDirty',\n        value: function isDirty() {\n            return this.dirty;\n        }\n    }, {\n        key: 'size',\n        get: function get() {\n            return this.entries.length;\n        }\n    }, {\n        key: 'entries',\n        get: function get() {\n            return Object.keys(this.internals);\n        }\n    }]);\n\n    return Cache;\n}();\n\nmodule.exports = Cache;\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar InternalBaseError = function (_Error) {\n    _inherits(InternalBaseError, _Error);\n\n    function InternalBaseError(message) {\n        _classCallCheck(this, InternalBaseError);\n\n        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(InternalBaseError).call(this, message));\n\n        _this.name = _this.constructor.name;\n        _this.message = message;\n        _this.stamp = Date.now();\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(_this, _this.constructor);\n        } else {\n            _this.stack = new Error(message).stack;\n        }\n        return _this;\n    }\n\n    _createClass(InternalBaseError, [{\n        key: 'callee',\n        set: function set(callee) {\n            if (typeof callee === 'string') {\n                this.callee = callee;\n            }\n        },\n        get: function get() {\n            return 'Callee::' + this.callee;\n        }\n    }]);\n\n    return InternalBaseError;\n}(Error);\n\nvar VanageError = function (_InternalBaseError) {\n    _inherits(VanageError, _InternalBaseError);\n\n    function VanageError(message) {\n        _classCallCheck(this, VanageError);\n\n        return _possibleConstructorReturn(this, Object.getPrototypeOf(VanageError).call(this, message));\n    }\n\n    _createClass(VanageError, [{\n        key: 'toString',\n        value: function toString() {\n            return '[' + this.name + '#' + (this.callee || '<unknown>') + '] ' + this.message + ' @ ' + this.stamp;\n        }\n    }]);\n\n    return VanageError;\n}(InternalBaseError);\n\nvar DelegationError = function (_InternalBaseError2) {\n    _inherits(DelegationError, _InternalBaseError2);\n\n    function DelegationError(message) {\n        _classCallCheck(this, DelegationError);\n\n        var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(DelegationError).call(this, message));\n\n        _this3.name = 'DelegationError';\n        _this3.callee = 'Service.delegate';\n        return _this3;\n    }\n\n    return DelegationError;\n}(InternalBaseError);\n\nvar ActError = function (_InternalBaseError3) {\n    _inherits(ActError, _InternalBaseError3);\n\n    function ActError(message) {\n        _classCallCheck(this, ActError);\n\n        var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(ActError).call(this, message));\n\n        _this4.name = 'ActError';\n        _this4.callee = 'Service.act';\n        return _this4;\n    }\n\n    return ActError;\n}(InternalBaseError);\n\nvar RegisterError = function (_InternalBaseError4) {\n    _inherits(RegisterError, _InternalBaseError4);\n\n    function RegisterError(message) {\n        _classCallCheck(this, RegisterError);\n\n        var _this5 = _possibleConstructorReturn(this, Object.getPrototypeOf(RegisterError).call(this, message));\n\n        _this5.name = 'RegisterError';\n        _this5.callee = 'Service.register';\n        return _this5;\n    }\n\n    return RegisterError;\n}(InternalBaseError);\n\nexports.InternalBaseError = InternalBaseError;\nexports.ServiceError = VanageError;\nexports.DelegationError = DelegationError;\nexports.ActError = ActError;\nexports.RegisterError = RegisterError;\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Signature = require('./Signature');\nvar equals = require('./utils/equal');\nvar uuid = require('./utils/uuid');\n\nvar Pattern = function () {\n    function Pattern(factory) {\n        _classCallCheck(this, Pattern);\n\n        this.name = 'Vanage.Pattern';\n        this.base = factory;\n        this.unique = uuid();\n        this.id = new Signature(this.unique, this.base);\n    }\n\n    _createClass(Pattern, [{\n        key: 'match',\n        value: function match(foreign) {\n            return equals(this.base, foreign);\n        }\n    }, {\n        key: 'signature',\n        get: function get() {\n            return this.id.value;\n        }\n    }, {\n        key: 'keys',\n        get: function get() {\n            return Object.keys(this.base);\n        }\n    }]);\n\n    return Pattern;\n}();\n\nmodule.exports = Pattern;\n\n},{\"./Signature\":7,\"./utils/equal\":10,\"./utils/uuid\":15}],6:[function(require,module,exports){\n(function (process){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar uuid = require('./utils/uuid');\nvar noop = require('./utils/noop');\nvar debug = require('./utils/debug');\nvar str = require('./utils/stringify');\nvar output = require('./utils/console');\n\nvar Error = require('./Error');\nvar Cache = require('./Cache');\nvar Pattern = require('./Pattern');\nvar Signature = require('./Signature');\n\nvar Service = function () {\n    function Service(options) {\n        _classCallCheck(this, Service);\n\n        this.name = 'Vanage.Service';\n        this.options = options || {};\n        this.id = options.identifier || uuid();\n        this.debug = noop;\n\n        this._internalId = Math.random().toString(36).slice(-12);\n        this._history = new Cache();\n        this._cache = new Cache();\n        this._delegates = [];\n        this._handlers = [];\n    }\n\n    _createClass(Service, [{\n        key: 'configure',\n        value: function configure(options) {\n            if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n                for (var key in options) {\n                    this.options[key] = options[key];\n                }\n            }\n\n            this._postConfigHook();\n        }\n    }, {\n        key: 'set',\n        value: function set(key, value) {\n            this.options[key] = value;\n            this._postConfigHook();\n        }\n    }, {\n        key: 'unregister',\n        value: function unregister(signature) {\n            var self = this;\n            var successfull = false;\n\n            if (!(signature instanceof Signature)) {\n                return this.fail(new Error.RegisterError('Cannot unregister by ' + (typeof signature === 'undefined' ? 'undefined' : _typeof(signature)) + ', signature needed'));\n            }\n\n            this._handlers.forEach(function (handler, index) {\n                if (handler.pattern.id.match(signature)) {\n                    debug('Found handler to unregister with sign ' + handler.pattern.signature);\n                    self._handlers.splice(index, 1);\n                    return successfull = true;\n                }\n            });\n\n            this._delegates.forEach(function (delegate, index) {\n                if (delegate.pattern.id.match(signature)) {\n                    debug('Found delegate to unregister with sign ' + delegate.pattern.signature);\n                    self._delegates.splice(index, 1);\n                    return successfull = true;\n                }\n            });\n\n            return successfull;\n        }\n    }, {\n        key: 'register',\n        value: function register(ressource, handler) {\n            var self = this;\n            this.debug('Registring new handler for %s', str(ressource));\n\n            if ((typeof ressource === 'undefined' ? 'undefined' : _typeof(ressource)) !== 'object') {\n                return this.fail(new Error.RegisterError('Endpoint target must be an object and not type ' + (typeof ressource === 'undefined' ? 'undefined' : _typeof(ressource))));\n            }\n\n            var factory = {\n                pattern: new Pattern(ressource),\n                handler: handler,\n                rootService: self._internalId\n            };\n\n            var index = this._handlers.push(factory);\n            var registry = this._handlers[index - 1];\n            this._cache.set(registry.pattern.signature, registry);\n\n            return factory.pattern.id;\n        }\n    }, {\n        key: 'delegate',\n        value: function delegate(ressource, delegation) {\n            var self = this;\n            this.debug('Registering delegate for %s', str(ressource));\n\n            if ((typeof ressource === 'undefined' ? 'undefined' : _typeof(ressource)) !== 'object') {\n                return this.fail(new Error.DelegationError('Delegation ressource must be an object and not ' + (typeof ressource === 'undefined' ? 'undefined' : _typeof(ressource))));\n            }\n\n            if (typeof delegation !== 'function') {\n                return this.fail(new Error.DelegationError('Delegators need a function to delegate, received ' + (typeof delegation === 'undefined' ? 'undefined' : _typeof(delegation))));\n            }\n\n            var factory = {\n                pattern: new Pattern(ressource),\n                delegate: delegation,\n                rootService: self._internalId\n            };\n\n            var index = this._delegates.push(factory);\n            var registry = this._delegates[index - 1];\n            this._cache.set(registry.pattern.signature, registry);\n\n            return factory.pattern.id;\n        }\n    }, {\n        key: 'act',\n        value: function act(target, data, resolver) {\n            var self = this;\n\n            data = data || {};\n            resolver = typeof resolver === 'function' ? resolver : noop;\n\n            if (!target) {\n                return this.fail(new Error.ActError('No target defined to act event on'));\n            }\n\n            this.debug('%s for %s with data %s', data.__delegate__ ? 'Delegating Action' : 'Acting', str(target), str(data));\n            this._history.set(new Pattern(target).signature, {\n                data: data,\n                stamp: Date.now(),\n                target: target,\n                resolver: resolver\n            });\n\n            this._delegates.forEach(function (delegation) {\n                if (delegation.pattern.match(target)) {\n                    self.debug('Found delegation for %s', str(target));\n                    delegation.delegate.apply(null, [function (bubbler, delegationData) {\n                        if ((typeof delegationData === 'undefined' ? 'undefined' : _typeof(delegationData)) !== 'object') {\n                            delegationData = {};\n                        }\n\n                        // TODO: Mixin with previous origin via Object.assign\n                        delegationData.origin = data;\n\n                        self.debug('Delegate target %s to %s', str(target), str(bubbler));\n                        delegationData.__delegate__ = target;\n                        self.act(bubbler, delegationData, resolver);\n                    }]);\n                }\n            });\n\n            this._handlers.forEach(function (factory) {\n                if (factory.pattern.match(target)) {\n                    factory.handler.apply(null, [data, function (error, result) {\n                        self.debug('Handling factory %s with data %s', str(target), str(data));\n                        return resolver.apply(null, [error, result, function (delegate, delegationData) {\n                            if ((typeof delegationData === 'undefined' ? 'undefined' : _typeof(delegationData)) !== 'object') {\n                                delegationData = {};\n                            }\n\n                            delegationData.__delegate__ = target;\n                            delegationData.origin = data;\n                            self.act(delegate, delegationData);\n                        }]);\n                    }]);\n                }\n            });\n        }\n    }, {\n        key: 'fail',\n        value: function fail(err) {\n            var message = '';\n            message += '[' + err.name + '#' + (err.callee || 'Callee::<unknown>') + ']';\n            message += err.message + ' ' + (err.stamp ? '@ ' + err.stamp : '');\n\n            if (typeof output.error === 'function') {\n                output.error.apply(output, message);\n            } else if (typeof output.log === 'function') {\n                output.log.apply(output, message);\n            } else if (typeof output.write === 'function') {\n                output.write.apply(process, message + '\\n');\n            }\n\n            return err;\n        }\n    }, {\n        key: '_postConfigHook',\n        value: function _postConfigHook() {\n            this.debug = debug(this.options.debug);\n        }\n    }]);\n\n    return Service;\n}();\n\nmodule.exports = Service;\n\n}).call(this,require('_process'))\n},{\"./Cache\":3,\"./Error\":4,\"./Pattern\":5,\"./Signature\":7,\"./utils/console\":8,\"./utils/debug\":9,\"./utils/noop\":13,\"./utils/stringify\":14,\"./utils/uuid\":15,\"_process\":2}],7:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar uuid = require('./utils/uuid');\nvar equals = require('./utils/equal');\n\nvar Signature = function () {\n    function Signature(id, factory) {\n        _classCallCheck(this, Signature);\n\n        this.identifier = factory || {};\n        this.unique = id || uuid();\n    }\n\n    _createClass(Signature, [{\n        key: 'match',\n        value: function match(signature) {\n            // we only compare signature instances here\n            if (!(signature instanceof Signature)) {\n                return false;\n            }\n\n            // skip if they dont have the same amount of factory keys\n            if (signature.identifierKeys.length !== this.identifierKeys.length) {\n                return false;\n            }\n\n            // check if the general hash is the same as string comparison\n            if (signature.value !== this.value) {\n                return false;\n            }\n\n            // factory based deep equality check\n            return equals(signature.identifier, this.identifier);\n        }\n    }, {\n        key: '_stringifyObjectLike',\n        value: function _stringifyObjectLike(obj) {\n            var self = this;\n\n            if (Array.isArray(obj)) {\n                return obj.join(',');\n            } else if (typeof obj === 'string') {\n                return obj;\n            } else if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {\n                var id = '';\n                var index = 0;\n\n                for (var key in obj) {\n                    if (!Array.isArray(obj[key]) && _typeof(obj[key]) === 'object') {\n                        id += self._stringifyObjectLike(obj[key]);\n                    }\n\n                    id += index === 0 ? '' : '&';\n                    id += key + ':' + obj[key];\n                    index++;\n                }\n\n                return id;\n            }\n\n            return JSON.stringify(obj);\n        }\n    }, {\n        key: 'value',\n        get: function get() {\n            var length = this.identifierKeys.length;\n\n            var id = this._stringifyObjectLike(this.identifier);\n            id += '@' + this.unique.replace(/-/g, '') + '#' + length;\n\n            return id;\n        }\n    }, {\n        key: 'identifierKeys',\n        get: function get() {\n            return Object.keys(this.identifier) || [];\n        }\n    }]);\n\n    return Signature;\n}();\n\nmodule.exports = Signature;\n\n},{\"./utils/equal\":10,\"./utils/uuid\":15}],8:[function(require,module,exports){\n(function (process){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nmodule.exports = function () {\n    if ((typeof console === 'undefined' ? 'undefined' : _typeof(console)) !== undefined) {\n        return console;\n    } else if (process && typeof process.stdout.write === 'function') {\n        return process.stdout;\n    }\n};\n\n}).call(this,require('_process'))\n},{\"_process\":2}],9:[function(require,module,exports){\n(function (process){\n'use strict';\n\nvar noop = require('./noop');\nvar console = require('./console')();\n\nmodule.exports = function (enabled) {\n    if (enabled) {\n        if (typeof console.debug === 'function') {\n            return console.debug.bind(console);\n        } else if (typeof console.log === 'function') {\n            return console.log.bind(console);\n        } else if (process && typeof process.stdout.write === 'function') {\n            return process.stdout.write.bind(process);\n        }\n    }\n\n    return noop;\n};\n\n}).call(this,require('_process'))\n},{\"./console\":8,\"./noop\":13,\"_process\":2}],10:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar pSlice = Array.prototype.slice;\nvar objectKeys = require('./keys');\nvar isArguments = require('./isArguments');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n    opts = opts || {};\n\n    // 7.1. All identical values are equivalent, as determined by ===.\n    if (actual === expected) {\n        return true;\n    } else if (actual instanceof Date && expected instanceof Date) {\n        return actual.getTime() === expected.getTime();\n\n        // 7.3. Other pairs that do not both pass typeof value == 'object',\n        // equivalence is determined by ==.\n    } else if (!actual || !expected || (typeof actual === 'undefined' ? 'undefined' : _typeof(actual)) != 'object' && (typeof expected === 'undefined' ? 'undefined' : _typeof(expected)) != 'object') {\n        return opts.strict ? actual === expected : actual == expected;\n\n        // 7.4. For all other Object pairs, including Array objects, equivalence is\n        // determined by having the same number of owned properties (as verified\n        // with Object.prototype.hasOwnProperty.call), the same set of keys\n        // (although not necessarily the same order), equivalent values for every\n        // corresponding key, and an identical 'prototype' property. Note: this\n        // accounts for both named and indexed properties on Arrays.\n    } else {\n        return objEquiv(actual, expected, opts);\n    }\n};\n\nfunction isUndefinedOrNull(value) {\n    return value === null || value === undefined;\n}\n\nfunction isBuffer(x) {\n    if (!x || (typeof x === 'undefined' ? 'undefined' : _typeof(x)) !== 'object' || typeof x.length !== 'number') {\n        return false;\n    }\n\n    if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n        return false;\n    }\n\n    if (x.length > 0 && typeof x[0] !== 'number') {\n        return false;\n    }\n\n    return true;\n}\n\nfunction objEquiv(a, b, opts) {\n    var i = void 0,\n        key = void 0,\n        ka = void 0,\n        kb = void 0;\n\n    if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) {\n        return false;\n    }\n\n    if (a.prototype !== b.prototype) {\n        return false;\n    }\n\n    if (isArguments(a)) {\n        if (!isArguments(b)) {\n            return false;\n        }\n\n        a = pSlice.call(a);\n        b = pSlice.call(b);\n\n        return deepEqual(a, b, opts);\n    }\n    if (isBuffer(a)) {\n        if (!isBuffer(b)) {\n            return false;\n        }\n\n        if (a.length !== b.length) {\n            return false;\n        }\n\n        for (i = 0; i < a.length; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n    try {\n        ka = objectKeys(a);\n        kb = objectKeys(b);\n    } catch (err) {\n        // happens when one is a string literal and the other isn't\n        return false;\n    }\n    // having the same number of owned properties (keys incorporates\n    // hasOwnProperty)\n    if (ka.length != kb.length) {\n        return false;\n    }\n\n    // the same set of keys (although not necessarily the same order),\n    ka.sort();\n    kb.sort();\n\n    for (i = ka.length - 1; i >= 0; i--) {\n        if (ka[i] != kb[i]) {\n            return false;\n        }\n    }\n\n    // equivalent values for every corresponding key\n    for (i = ka.length - 1; i >= 0; i--) {\n        key = ka[i];\n\n        if (!deepEqual(a[key], b[key], opts)) {\n            return false;\n        }\n    }\n\n    return (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === (typeof b === 'undefined' ? 'undefined' : _typeof(b));\n}\n\n},{\"./isArguments\":11,\"./keys\":12}],11:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar supportsArgumentsClass = function (undefined) {\n    return Object.prototype.toString.call(arguments);\n}() == '[object Arguments]';\n\nmodule.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n    return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object) {\n    return object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) == 'object' && typeof object.length == 'number' && Object.prototype.hasOwnProperty.call(object, 'callee') && !Object.prototype.propertyIsEnumerable.call(object, 'callee') || false;\n};\n\n},{}],12:[function(require,module,exports){\n'use strict';\n\nexports = module.exports = function (undefined) {\n    if (typeof Object.keys === 'function') {\n        return Object.keys;\n    }\n\n    return shim;\n}();\n\nexports.shim = shim;\nfunction shim(obj) {\n    var keys = [];\n\n    for (var key in obj) {\n        keys.push(key);\n    }\n\n    return keys;\n}\n\n},{}],13:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function () {/* non operational method */};\n\n},{}],14:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (input) {\n    if (typeof input === 'string') {\n        return input;\n    } else if (Array.isArray(input)) {\n        return input.join(', ');\n    } else if (input.toISOString !== undefined) {\n        return input.toISOString();\n    }\n\n    return JSON.stringify(input);\n};\n\n},{}],15:[function(require,module,exports){\n'use strict';\n\nvar guidBlock = function guidBlock() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nmodule.exports = function guid() {\n    return guidBlock() + guidBlock() + '-' + guidBlock() + '-' + guidBlock() + '-' + guidBlock() + '-' + guidBlock() + guidBlock() + guidBlock();\n};\n\n},{}]},{},[1])(1)\n});"],"file":"vanage.js","sourceRoot":"/source/"}